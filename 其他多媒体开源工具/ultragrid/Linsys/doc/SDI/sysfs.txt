This file briefly explains how the raw SDI API uses the
sysfs virtual filesystem.

Some interface parameters are controlled through sysfs.
These include the interface operating mode, number and size of buffers,
and transmitter clock source.
These parameters may be changed by the root user
while the associated interface is not open.
Their values persist as long as the driver module is loaded.
Any user may read the parameters at any time.

For example,

	cat /sys/class/sdi/sdirx0/buffers

displays the number of buffers allocated by the first receive interface,
while

	echo 19176 > /sys/class/sdi/sditx1/bufsize

sets the size of the buffers on the second transmit interface to 19176 bytes.

An example program called sdicfg is also provided in the Examples/SDI directory
which demonstrates how an application can read or change the parameters.

Each parameter has certain limits on the values it can take.
These limits are described below. If a parameter does not exist
on a given interface, that parameter is omitted.
Some interfaces do not support all possible values.

buffers
	Number of buffers in the driver buffer queue.
	Valid values:	2...32768

bufsize
	Size of each buffer in the driver buffer queue in bytes.
	Valid values:
		For transmitters,
			1024, 1028, 1032,...67108864
		For receivers,
			4, 8, 12,...67108864

clock_source
	Transmitter clock source.
	Valid values:
		0 - onboard oscillator (default)
		1 - external reference
		2 - recovered receive clock

mode
	Interface operating mode.
	Valid values:
		0 - 8-bit precision
		1 - pack four 10-bit words into five bytes (default)

Many methods of writing sysfs parameters do not check for errors.
Confirming the change by reading the value after a write is recommended
in these cases. Sdicfg checks for write errors.

